#!/usr/bin/env python3
# This file is placed in the Public Domain.
#
# pylint: disable=C,R,W0212,E0402


"objects"


import getpass
import os
import readline
import sys
import termios


sys.path.insert(0, os.getcwd())


from objx.default import Default
from objx.excepts import Error, enable
from objx.handler import Client, Command, Console, cmnd, daemon, parse_cmd, scan
from objx.handler import forever
from objx.workdir import Workdir, skel


Cfg         = Default()
Cfg.mod     = "cmd,ena,mod"
Cfg.name    = "opd"
Cfg.wd      = os.path.expanduser(f"~/.{Cfg.name}")
Cfg.pidfile = os.path.join(Cfg.wd, f"{Cfg.name}.pid")
Workdir.wd = Cfg.wd


mods = None

try:
    import mods
except ModuleNotFoundError:
    pass


def wrap(func):
    old2 = None
    try:
        old2 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        print("")
    finally:
        if old2:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old2)


"runtime"


def cmd(event):
    event.reply(",".join(sorted(list(Command.cmds))))


def dis(event):
    if not event.args:
        mods = ",".join(dir(mods))
        event.reply(f"disable {mods}")
        return
    what = event.args[0]
    mod = getattr(mods, what, None)
    if mod:
        func = getattr(mod, "shutdown", None)
        if func:
            try:
                func()
            except Exception as ex:
                Error.add(ex)


def ena(event):
    if not event.args:
        mods = ",".join(dir(mods))
        event.reply(f"enable {mods}")
        return
    what = event.args[0]
    try:
        init = event.args[1]
    except IndexError:
        init = False
    scan(mods, what, init)


def main():
    Command.add(cmd)
    Command.add(dis)
    Command.add(ena)
    enable(print)
    skel()
    parse_cmd(Cfg, " ".join(sys.argv[1:]))
    readline.redisplay()
    if 'a' in Cfg.opts:
        Cfg.mod = ",".join(mods.__dir__())
    if "v" in Cfg.opts:
        dte = time.ctime(time.time()).replace("  ", " ")
        debug(f"{Cfg.name.upper()} {Cfg.opts.upper()} started {dte}")
    if "h" in Cfg.opts:
        from . import __doc__ as txt
        print(txt)
        return
    if "c" in Cfg.opts:
        scan(mods, Cfg.mod, True, Cfg.sets.dis, True)
        csl = Console()
        if 'z' in Cfg.opts:
            csl.threaded = False
        csl.start()
        forever()
        return
    if Cfg.otxt:
        Cfg.mod = ",".join(mods.__dir__())
        scan(mods, Cfg.mod, False, Cfg.sets.dis, False)
        return cmnd(Cfg.otxt, print)
    Cfg.mod = ",".join(mods.__dir__())
    Cfg.user = getpass.getuser()
    daemon(Cfg.pidfile, "v" in Cfg.opts)
    privileges(Cfg.user)
    scan(mods, Cfg.mod, True, Cfg.dis, True)
    forever()


def wrapped():
    wrap(main)
    Error.show()


if __name__ == "__main__":
    wrapped()
