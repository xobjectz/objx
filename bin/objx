#!/usr/bin/env python3
# This file is placed in the Public Domain.
# pylint: disable=C0413,W0212,E0401


"main"


import getpass
import os
import pathlib
import pwd
import readline
import sys
import termios
import time


sys.path.insert(0, os.getcwd())


from objx.cfg    import Config
from objx.cli    import CLI
from objx.cmds   import Commands, add, dump
from objx.defer  import Errors, errors
from objx.disk   import Persist
from objx.encode import dumps
from objx.event  import Event
from objx.help   import TXT
from objx.log    import Logging
from objx.main   import cmnd, init
from objx.parse  import parse


from objx import user


if os.path.exists("mods"):
    import mods as MODS
else:
    MODS = None


Cfg         = Config()
Cfg.dis     = ""
Cfg.mod     = "cmd,err,mod,thr"
Cfg.opts    = ""
Cfg.name    = "objx"
Cfg.wdr     = os.path.expanduser(f"~/.{Cfg.name}")
Cfg.pidfile = os.path.join(Cfg.wdr, f"{Cfg.name}.pid")


Persist.workdir = Cfg.wdr


class Console(CLI):

    "Console"

    def announce(self, txt):
        "disable announce."

    def callback(self, evt):
        "wait for callback."
        CLI.callback(self, evt)
        evt.wait()

    def poll(self):
        "poll console and create event."
        evt = Event()
        evt.txt = input("> ")
        evt.type = "command"
        return evt


def forever():
    while True:
        time.sleep(1.0)


def wrap(func):
    "reset terminal."
    old3 = None
    try:
        old3 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        print("")
    finally:
        if old3:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old3)


def wrapped():
    "wrap main."
    wrap(main)
    errors()


def dmp(event):
    event.reply(dumps(Commands.modnames, indent=4))


def main():
    "main"
    parse(Cfg, " ".join(sys.argv[1:]))
    add(dmp)
    Cfg.dis = Cfg.sets.dis
    cmnd(Cfg.otxt, print)


if __name__ == "__main__":
    wrapped()
