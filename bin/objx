#!/usr/bin/env python3
# This file is placed in the Public Domain.
#
# pylint: disable=C,R,W0105


"objects"


import os
import sys
import time
import threading


sys.path.insert(0, os.getcwd())


from objx.default import Default
from objx.object  import update
from mods.command import Command, cmnd, parse_cmd
from mods.errors  import Errors
from mods.thread  import launch
from mods.utils   import laps


import mods.irc


"commands"


def cmd(event):
    event.reply(",".join(Command.cmds))


def dbg(event):
    "raise exception"
    raise Exception("yo!")


def err(event):
    "show errors."
    nmr = 0
    for bot in Broker.all():
        if 'state' in dir(bot):
            event.reply(str(bot.state))
            nmr += 1
    event.reply(f"status: {nmr} errors: {len(Errors.errors)}")
    for exc in Errors.errors:
        txt = Errors.format(exc)
        for line in txt.split():
            event.reply(line)


def thr(event):
    "show running threads."
    result = []
    for thread in sorted(threading.enumerate(), key=lambda x: x.name):
        if str(thread).startswith('<_'):
            continue
        obj = Default()
        update(obj, vars(thread))
        if getattr(obj, 'sleep', None):
            uptime = obj.sleep - int(time.time() - obj.state["latest"])
        elif getattr(obj, 'starttime', None):
            uptime = int(time.time() - obj.starttime)
        else:
            uptime = int(time.time() - STARTTIME)
        result.append((uptime, thread.name))
    res = []
    for uptime, txt in sorted(result, key=lambda x: x[1]):
        lap = laps(uptime)
        res.append(f'{txt}/{lap}')
    if res:
        event.reply(' '.join(res))
    else:
        event.reply('no threads')


"register"


Command.add(cmd)
Command.add(dbg)
Command.add(err)
Command.add(thr)


"runtime"


def main():
    Cfg = Default()
    parse_cmd(Cfg, " ".join(sys.argv[1:]))
    if os.path.exists("mods"):
        launch(mods.irc.init)
        while 1:
            try:
                time.sleep(1.0)
            except (KeyboardInterrupt, EOFError):
                return


if __name__ == "__main__":
    main()
    Errors.show()
