#!/usr/bin/env python3
# This file is placed in the Public Domain.
#
# pylint: disable=C,R,W0212,W0611,W0613,W0105,E0401,E0402


"""NAME

    OBJX - objects library

SYNOPSIS

    objx <cmd> [key=val] [key==val]
    objx [-a] [-c] [-d] [-h] [-v] [-x]

INSTALL

    $ pipx install objx

DESCRIPTION

    OBJX has all the python3 code to program a unix cli program, such as
    disk perisistence for configuration files, event handler to
    handle the client/server connection, code to introspect modules
    for commands, deferred exception handling to not crash on an
    error, a parser to parse commandline options and values, etc.

    OBJX provides an objx namespace that allows for easy json save//load
    to/from disk of objects. It provides an "clean namespace" Object class
    that only has dunder methods, so the namespace is not cluttered with
    method names. This makes storing and reading to/from json possible.

    OBJX provides a demo bot, it can connect to IRC, fetch and display RSS
    feeds, take todo notes, keep a shopping list and log text. You can also
    copy/paste the service file and run it under systemd for 24/7 presence
    in a IRC channel.

    OBJX is Public Domain.

USAGE

    without any argument the program does nothing

    $ objx
    $

    see list of commands

    $ objx cmd
    cmd,err,mod,req,thr,ver

    list of modules

    $ objx mod
    cmd,err,fnd,irc,log,mod,req,rss,tdo,thr

    use mod=<name1,name2> to load additional modules

    $ objx cfg mod=irc

    start a console

    $ objx -c mod=irc,rss
    >

    use -v for verbose

    $ objx -cv mod=irc
    OBJX started CV started Sat Dec 2 17:53:24 2023
    >

    start daemon

    $ objd
    $ 

CONFIGURATION

    irc

    $ objx cfg server=<server>
    $ objx cfg channel=<channel>
    $ objx cfg nick=<nick>

    sasl

    $ objx pwd <nsvnick> <nspass>
    $ objx cfg password=<frompwd>

    rss

    $ objx rss <url>
    $ objx dpl <url> <item1,item2>
    $ objx rem <url>
    $ objx nme <url> <name>

SYSTEMD

    save the following it in /etc/systems/system/objx.service and
    replace "<user>" with the user running pipx

    [Unit]
    Description=objects daemon
    Requires=network-online.target
    After=network-online.target

    [Service]
    Type=simple
    User=<user>
    Group=<user>
    WorkingDirectory=/home/<user>/.objx
    ExecStart=/home/<user>/.local/pipx/venvs/objx/bin/objx -d
    RemainAfterExit=yes

    [Install]
    WantedBy=multi-user.target

    then run this

    $ mkdir ~/.objx
    $ sudo systemctl enable objx --now

    default channel/server is #objx on localhost

CODE

    >>> from objx import Object, read, write
    >>> o = Object()
    >>> o.a = "b"
    >>> write(o, "test")
    >>> oo = Object()
    >>> read(oo, "test")
    >>> oo
    {"a": "b"}

COMMANDS

    cmd - commands
    cfg - irc configuration
    dlt - remove a user
    dpl - sets display items
    fnd - find objects 
    log - log some text
    met - add a user
    mre - displays cached output
    pwd - sasl nickserv name/pass
    rem - removes a rss feed
    req - reconsider
    rss - add a feed
    thr - show the running threads

FILES

    ~/.objx
    ~/.local/bin/objx
    ~/.local/pipx/venvs/objx/

AUTHOR

    Bart Thate <objx@proton.me>

COPYRIGHT

    OBJX is Public Domain.

"""


import getpass
import inspect
import os
import pwd
import readline
import sys
import termios
import time
import _thread


sys.path.insert(0, os.getcwd())


from objx import Broker, Client, Command, Default, Error, Event, Handler
from objx import Object, Storage
from objx import cdir, cmnd, debug, forever, launch, parse_command, scan, spl


def __dir__():
    return (
        'Cfg',
        'Console',
        "Client",
        'cmnd',
        'daemon',
        'daemoned',
        'forever',
        'main',
        'privileges',
        'scan',
        'wrap',
        'wrapped'
    )


__all__ = __dir__()


Cfg         = Default()
Cfg.mod     = "cmd,mod"
Cfg.name    = "objx"
Cfg.wd      = os.path.expanduser(f"~/.{Cfg.name}")
Cfg.pidfile = os.path.join(Cfg.wd, f"{Cfg.name}.pid")
Cfg.user    = getpass.getuser()
Storage.wd  = Cfg.wd


from objx import modules


class Console(Client):

    def announce(self, txt):
        pass

    def callback(self, evt):
        Client.callback(self, evt)
        evt.wait()

    def poll(self):
        evt = Event()
        evt.orig = object.__repr__(self)
        evt.txt = input("> ")
        evt.type = "command"
        return evt

    def say(self, channel, txt):
        txt = txt.encode('utf-8', 'replace').decode()
        print(txt)


def daemon(pidfile, verbose=False):
    pid = os.fork()
    if pid != 0:
        os._exit(0)
    os.setsid()
    pid2 = os.fork()
    if pid2 != 0:
        os._exit(0)
    if not verbose:
        with open('/dev/null', 'r', encoding="utf-8") as sis:
            os.dup2(sis.fileno(), sys.stdin.fileno())
        with open('/dev/null', 'a+', encoding="utf-8") as sos:
            os.dup2(sos.fileno(), sys.stdout.fileno())
        with open('/dev/null', 'a+', encoding="utf-8") as ses:
            os.dup2(ses.fileno(), sys.stderr.fileno())
    os.umask(0)
    os.chdir("/")
    if os.path.exists(pidfile):
        os.unlink(pidfile)
    cdir(os.path.dirname(pidfile))
    with open(pidfile, "w", encoding="utf-8") as fds:
        fds.write(str(os.getpid()))


def daemoned():
    daemon(Cfg.pidfile)
    privileges(Cfg.user)
    scan(modules, Cfg.mod, True)
    forever()


def privileges(username):
    pwnam = pwd.getpwnam(username)
    os.setgid(pwnam.pw_gid)
    os.setuid(pwnam.pw_uid)


def wrap(func):
    old2 = None
    try:
        old2 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        print("")
    finally:
        if old2:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old2)


def main():
    Storage.skel()
    parse_command(Cfg, " ".join(sys.argv[1:]))
    readline.redisplay()
    usemods = False
    if Cfg.mod:
        usemods = True
    if "a" in Cfg.opts:
        Cfg.mod = ",".join(modules.__dir__())
    if "d" in Cfg.opts:
        daemoned()
        return 
    csl = Console()
    if Cfg.txt:
        scan(modules, Cfg.mod)
        return cmnd(csl, Cfg.otxt)
    if "h" in Cfg.opts:
        return print(__doc__)
    if "v" in Cfg.opts:
        dte = time.ctime(time.time()).replace("  ", " ")
        debug(f"{Cfg.name.upper()} {Cfg.opts.upper()} started {dte}")
    if "c" in Cfg.opts:
        scan(
             modules,
             Cfg.mod,
             usemods,
             Cfg.sets.dis,
             "w" in Cfg.opts or usemods
        )
        csl.start()
        forever()


def wrapped():
    wrap(main)
    Error.show()


if __name__ == "__main__":
    wrapped()
