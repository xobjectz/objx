#!/usr/bin/env python3
# This file is placed in the Public Domain.
#
# pylint: disable=R0902,R0903,C0413,W0105,W0212


"objects"


import inspect
import os
import queue
import sys
import termios
import time
import threading
import _thread


sys.path.insert(0, os.getcwd())


from objx.iface import Default, Object, Persist
from objx.iface import parse, spl


if os.path.exists("mods"):
    import mods as MODS
else:
    MODS = None


Cfg         = Default()
Cfg.debug   = True
Cfg.mod     = ""
Cfg.name    = "objx"
Cfg.silent  = False
Cfg.version = "83"
Cfg.wdr     = ".test"


"commands"


class Commands:

    "Commands"

    cmds = Object()


    @staticmethod
    def add(func):
        "add command."
        setattr(Commands.cmds, func.__name__, func)

    @staticmethod
    def scan(mod) -> None:
        "scan module for commands."
        for key, cmdz in inspect.getmembers(mod, inspect.isfunction):
            if key.startswith("cb"):
                continue
            if 'event' in cmdz.__code__.co_varnames:
                Commands.add(cmdz)


"event"


class Event(Default):

    "Event"

    def __init__(self):
        Default.__init__(self)
        self._thr    = None
        self._ready  = threading.Event()
        self.done    = False
        self.orig    = None
        self.result  = []
        self.txt     = ""
        self.type    = "command"

    def ready(self):
        "event is ready."
        self._ready.set()

    def reply(self, txt):
        "add text to the result"
        self.result.append(txt)

    def wait(self):
        "wait for event to be ready."
        if self._thr:
            self._thr.join()
        self._ready.wait()
        return self.result


"handler"


class Handler:

    "Handler"

    def __init__(self):
        self.cbs      = Object()
        self.queue    = queue.Queue()
        self.stopped  = threading.Event()
        self.threaded = True

    def callback(self, evt):
        "call callback based on event type."
        func = getattr(self.cbs, evt.type, None)
        if not func:
            evt.ready()
            return
        func(self, evt)

    def loop(self):
        "proces events until interrupted."
        while not self.stopped.is_set():
            try:
                evt = self.poll()
                self.callback(evt)
            except (KeyboardInterrupt, EOFError):
                _thread.interrupt_main()

    def poll(self):
        "function to return event."
        return self.queue.get()

    def put(self, evt):
        "put event into the queue."
        self.queue.put_nowait(evt)

    def register(self, typ, cbs):
        "register callback for a type."
        setattr(self.cbs, typ, cbs)

    def start(self):
        "start the event loop."
        self.loop()

    def stop(self):
        "stop the event loop."
        self.stopped.set()


"command line interface"


class CLI(Handler):

    "CLI"


    def __init__(self):
        Handler.__init__(self)
        self.register("command", command)

    def say(self, _channel, txt):
        "echo on verbose."
        self.raw(txt)

    def raw(self, txt):
        "print to screen."
        txt = txt.encode('utf-8', 'replace').decode()
        print(txt)

    def show(self, evt):
        "show results into a channel."
        for txt in evt.result:
            self.say(evt.channel, txt)


class Console(CLI):

    "Console"

    def announce(self, txt):
        "disable announce."

    def callback(self, evt):
        "wait for callback."
        CLI.callback(self, evt)
        evt.wait()

    def poll(self):
        "poll console and create event."
        evt = Event()
        evt.orig = object.__repr__(self)
        evt.txt = input("> ")
        evt.type = "command"
        return evt


"utilitites"


def cmnd(txt):
    "do a command using the provided output function."
    cli = CLI()
    evn = Event()
    evn.orig = repr(cli)
    evn.txt = txt
    command(cli, evn)
    evn.wait()
    return evn


def scan(pkg, modstr):
    "scan modules for commands and classes"
    mds = []
    for modname in spl(modstr):
        module = getattr(pkg, modname, None)
        if not module:
            continue
        Commands.scan(module)
    return mds


"callbacks"


def command(bot, evt):
    "check for and run a command."
    parse(evt)
    func = getattr(Commands.cmds, evt.cmd, None)
    if func:
        func(evt)
    bot.show(evt)
    evt.ready()


"methods"




"commands"


def cmd(event):
    "list commands."
    event.reply(",".join(sorted(list(Commands.cmds))))


"runtime"


def wrap(func):
    "reset terminal."
    old2 = None
    try:
        old2 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        print("")
    finally:
        if old2:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old2)


def main():
    "main"
    Persist.workdir = Cfg.wdr
    Commands.add(cmd)
    Cfg.mod = ",".join(dir(MODS))
    parse(Cfg, " ".join(sys.argv[1:]))
    if "v" in Cfg.opts:
        dte = " ".join(time.ctime(time.time()).replace("  ", " ").split()[1:])
        print(f'{dte} {Cfg.name.upper()} {Cfg.opts.upper()} {Cfg.mod.upper()}'.replace("  ", " "))
    scan(MODS, Cfg.mod)
    if "c" in Cfg.opts:
        csl = Console()
        csl.start()
    elif Cfg.otxt:
        cmnd(Cfg.otxt)


if __name__ == "__main__":
    wrap(main)
